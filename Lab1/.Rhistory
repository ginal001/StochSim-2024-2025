random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
return(result)
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
ks.test(realization_Tn, "pbeta", shape1 = 1/2, shape2 = 1/2)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
return(result)
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
ks.test(realization_Tn, "pbeta", shape1 = 1/2, shape2 = 1/2)
rm(list = ls())
?pexp
W = rexp(3, rate = c(1, 2, 3))
?argmin
?min
which.min(W)
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 3))
argmin <- c(argmin, which.min(W))
}
table(argmin)
freq(argmin)
table(argmin) / 100000
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 3))
argmin <- c(argmin, which.min(W))
}
table(argmin) / 100000
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 3))
argmin <- c(argmin, which.min(W))
}
table(argmin) / length(argmin)
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 5))
argmin <- c(argmin, which.min(W))
}
table(argmin) / length(argmin)
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 5))
argmin <- c(argmin, which.min(W))
}
table(argmin) / length(argmin)
generate_discretes <- function(n, freq){
W = rexp(length(freq), rate = freq
argmin <- c(argmin, which.min(W))
generate_discretes <- function(n, freq){
for (i in 1:n){
W = rexp(length(freq), rate = freq
argmin <- c(argmin, which.min(W))
for (i in 1:n){
W = rexp(length(freq), rate = freq)
argmin <- c(argmin, which.min(W))
}
generate_discretes <- function(n, freq){
for (i in 1:n){
W = rexp(length(freq), rate = freq)
argmin <- c(argmin, which.min(W))
}
return(argmin)
}
generate_discretes(10000, c(1,2,3))
table(generate_discretes(10000, c(1,2,3)) / 10000)
table(generate_discretes(10000, c(1,2,3)) / 10000
argmin <- vector()
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 5))
argmin <- c(argmin, which.min(W))
}
table(argmin) / length(argmin)
table(generate_discretes(n, c(1,2,3)) / n
table(generate_discretes(n, c(1,2,3))) / n
generate_discretes <- function(n, freq){
for (i in 1:n){
W = rexp(length(freq), rate = freq)
argmin <- c(argmin, which.min(W))
}
return(argmin)
}
n <- 1000
table(generate_discretes(n, c(1,2,3))) / n
discrete_realization <- generate_discretes(n, c(1,2,3))
discrete_realization <- generate_discretes(n, c(1,2,3))
table(discrete_realization) / n
discrete_realization
table(discrete_realization)
table(discrete_realization) / 10000
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 5))
argmin <- c(argmin, which.min(W))
}
table(argmin) / length(argmin)
generate_discretes <- function(n, freq){
for (i in 1:n){
W = rexp(length(freq), rate = freq)
argmin <- c(argmin, which.min(W))
}
return(argmin)
}
n <- 1000
discrete_realization <- generate_discretes(n, c(1,2,3))
table(discrete_realization) / n
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 5))
argmin <- c(argmin, which.min(W))
}
table(argmin) / length(argmin)
generate_discretes <- function(n, freq){
for (i in 1:n){
argmin <- vector()
W = rexp(length(freq), rate = freq)
argmin <- c(argmin, which.min(W))
}
return(argmin)
}
n <- 1000
discrete_realization <- generate_discretes(n, c(1,2,3))
table(discrete_realization) / n
discrete_realization <- generate_discretes(n, c(1,2,3))
table(discrete_realization)
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 5))
argmin <- c(argmin, which.min(W))
}
table(argmin) / length(argmin)
generate_discretes <- function(n, freq){
argmin <- vector()
for (i in 1:n){
W = rexp(length(freq), rate = freq)
argmin <- c(argmin, which.min(W))
}
return(argmin)
}
n <- 1000
discrete_realization <- generate_discretes(n, c(1,2,3))
table(discrete_realization) / n
hist(discrete_realization)
barplot(discrete_realization)
plot(discrete_realization)
barplot(discrete_realization)
hist(discrete_realization)
n <- 1000
vector1 <- c(1,2,3)
vector2 <- c(1, 1, 10)
vector3 <- c(8, 12, 25)
discrete_realization <- generate_discretes(n, vector1)
table(discrete_realization) / n
discrete_realization <- generate_discretes(n, vector2)
table(discrete_realization) / n
discrete_realization <- generate_discretes(n, vector3)
table(discrete_realization) / n
rm(list = ls())
n <- 1000
vector1 <- c(1,2,3)
vector2 <- c(1, 1, 10, 2, 3)
vector3 <- c(8, 12)
discrete_realization <- generate_discretes(n, vector1)
table(discrete_realization) / n
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 5))
argmin <- c(argmin, which.min(W))
}
table(argmin) / length(argmin)
# Function for generating discrete variables
generate_discretes <- function(n, freq){
argmin <- vector()
for (i in 1:n){
W = rexp(length(freq), rate = freq)
argmin <- c(argmin, which.min(W))
}
return(argmin)
}
n <- 1000
vector1 <- c(1,2,3)
vector2 <- c(1, 1, 10, 2, 3)
vector3 <- c(8, 12)
discrete_realization <- generate_discretes(n, vector1)
table(discrete_realization) / n
discrete_realization <- generate_discretes(n, vector2)
table(discrete_realization) / n
discrete_realization <- generate_discretes(n, vector3)
table(discrete_realization) / n
rm(list = ls())
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 5))
argmin <- c(argmin, which.min(W))
}
table(argmin) / length(argmin)
# Function for generating discrete variables
generate_discretes <- function(n, freq){
argmin <- vector()
for (i in 1:n){
W = rexp(length(freq), rate = freq)
argmin <- c(argmin, which.min(W))
}
return(argmin)
}
n <- 1000
vector1 <- c(1,2,3)
vector2 <- c(1, 1, 10, 2, 3)
vector3 <- c(8, 12)
discrete_realization <- generate_discretes(n, vector1)
table(discrete_realization) / n
discrete_realization <- generate_discretes(n, vector2)
table(discrete_realization) / n
discrete_realization <- generate_discretes(n, vector3)
table(discrete_realization) / n
n <- 12
set.seed(10)
x <- runif(n)
x
normal_variable <- (sum(x) - n/2) / (sqrt(n/12))
normal_variable
normal <- function(){
n <- 12
x <- runif(n)
normal_variable <- (sum(x) - n/2) / (sqrt(n/12))
return(normal_variable)
}
normal()
m <- 200
normal_vector <- vector()
for (i in 1:m){
normal_vector <- c(normal_vector, normal())
}
{
hist(normal_vector, prob = TRUE)
rug(normal_vector)
curve(dnorm, from = -3, to = 3, add = TRUE)
}
ecdf(normal_vector)
{
plot(ecdf(normal_vector))
curve(pnorm, from = -3, to = 3, add = TRUE)
}
ks.test(normal_vector, pnorm)
bern <- function(alfa, beta){
x <- runif(1)
return(as.integer(x < alfa / (alfa + beta)))
}
experiment <- function(alfa, beta, n){
X <- vector()
for (i in 1:n){
Xn <- bern(alfa + sum(X), beta + length(X) - sum(X))
X <- c(X, Xn)
}
S <- cumsum(X)
return(S)
}
alfa <- 1
beta <- 1
n <- 2000
data_for_plot <- data.frame(x = 1:n)
for(i in 1:20){
results <- experiment(alfa, beta, n)
name <- paste0("experiment", i)
data_for_plot[name] <- results / (1:n)
}
# Tworzymy wykres z wykorzystaniem matplot
matplot(data_for_plot$x, data_for_plot[, -1], type = "l", lty = 1,
xlab = "Indeks", ylab = "Wynik/Indeks", main = "Wyniki eksperymentÃ³w")
generate_betas <- function(alfa, beta, n, m){
betas <- vector()
for(i in 1:m){
results <- experiment(alfa, beta, n)
betas <- c(betas, results[n]/n)
}
return(betas)
}
my_betas <- generate_betas(1, 1, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 1, shape2 = 1)
my_betas <- generate_betas(3, 2, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 3, shape2 = 2)
my_betas <- generate_betas(11, 1, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 11, shape2 = 1)
my_betas <- generate_betas(0.5, 0.5, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 0.5, shape2 = 0.5)
my_betas <- generate_betas(5, 31, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 5, shape2 = 31)
rm(list = ls())
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
return(result)
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
ks.test(realization_Tn, "pbeta", shape1 = 1/2, shape2 = 1/2)
rm(list = ls())
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 5))
argmin <- c(argmin, which.min(W))
}
table(argmin) / length(argmin)
# Function for generating discrete variables
generate_discretes <- function(n, freq){
argmin <- vector()
for (i in 1:n){
W = rexp(length(freq), rate = freq)
argmin <- c(argmin, which.min(W))
}
return(argmin)
}
n <- 1000
vector1 <- c(1,2,3)
vector2 <- c(1, 1, 10, 2, 3)
vector3 <- c(8, 12)
discrete_realization <- generate_discretes(n, vector1)
table(discrete_realization) / n
discrete_realization <- generate_discretes(n, vector2)
table(discrete_realization) / n
discrete_realization <- generate_discretes(n, vector3)
table(discrete_realization) / n
rm(list = ls())
n <- 12
set.seed(10)
x <- runif(n)
x
normal_variable <- (sum(x) - n/2) / (sqrt(n/12))
normal_variable
normal <- function(){
n <- 12
x <- runif(n)
normal_variable <- (sum(x) - n/2) / (sqrt(n/12))
return(normal_variable)
}
normal()
m <- 200
normal_vector <- vector()
for (i in 1:m){
normal_vector <- c(normal_vector, normal())
}
{
hist(normal_vector, prob = TRUE)
rug(normal_vector)
curve(dnorm, from = -3, to = 3, add = TRUE)
}
ecdf(normal_vector)
{
plot(ecdf(normal_vector))
curve(pnorm, from = -3, to = 3, add = TRUE)
}
ks.test(normal_vector, pnorm)
bern <- function(alfa, beta){
x <- runif(1)
return(as.integer(x < alfa / (alfa + beta)))
}
experiment <- function(alfa, beta, n){
X <- vector()
for (i in 1:n){
Xn <- bern(alfa + sum(X), beta + length(X) - sum(X))
X <- c(X, Xn)
}
S <- cumsum(X)
return(S)
}
alfa <- 1
beta <- 1
n <- 2000
data_for_plot <- data.frame(x = 1:n)
for(i in 1:20){
results <- experiment(alfa, beta, n)
name <- paste0("experiment", i)
data_for_plot[name] <- results / (1:n)
}
# Creating plot
matplot(data_for_plot$x, data_for_plot[, -1], type = "l", lty = 1,
xlab = "Index", ylab = "Result/Index", main = "Results of experiments")
generate_betas <- function(alfa, beta, n, m){
betas <- vector()
for(i in 1:m){
results <- experiment(alfa, beta, n)
betas <- c(betas, results[n]/n)
}
return(betas)
}
my_betas <- generate_betas(1, 1, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 1, shape2 = 1)
my_betas <- generate_betas(3, 2, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 3, shape2 = 2)
my_betas <- generate_betas(11, 1, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 11, shape2 = 1)
my_betas <- generate_betas(0.5, 0.5, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 0.5, shape2 = 0.5)
my_betas <- generate_betas(5, 31, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 5, shape2 = 31)
rm(list = ls())
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
return(result)
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
ks.test(realization_Tn, "pbeta", shape1 = 1/2, shape2 = 1/2)
rm(list = ls())
argmin <- vector()
for (i in 1:10000){
W = rexp(3, rate = c(1, 2, 5))
argmin <- c(argmin, which.min(W))
}
table(argmin) / length(argmin)
# Function for generating discrete variables
generate_discretes <- function(n, freq){
argmin <- vector()
for (i in 1:n){
W = rexp(length(freq), rate = freq)
argmin <- c(argmin, which.min(W))
}
return(argmin)
}
n <- 1000
vector1 <- c(1,2,3)
vector2 <- c(1, 1, 10, 2, 3)
vector3 <- c(8, 12)
discrete_realization <- generate_discretes(n, vector1)
table(discrete_realization) / n
discrete_realization <- generate_discretes(n, vector2)
table(discrete_realization) / n
discrete_realization <- generate_discretes(n, vector3)
table(discrete_realization) / n
rm(list = ls())
