Sn <- cumsum(distribution(n))
Tn <- (as.integer(Sn > 0)) / (1:n)
Tn
distribution <- rnorm
n <- 200
Sn <- cumsum(distribution(n))
Tn <- (as.integer(Sn > 0)) / (1:n)
Sn
Tn
Sn <- cumsum(distribution(n))
Tn <- cumsum(as.integer(Sn > 0)) / (1:n)
Sn
Tn
plot(Sn)
{
plot(Sn)
abline(h = 0)
}
Tn
random_walk <- function(distribution, n){
Sn <- cumsum(distribution(n))
Tn <- cumsum(as.integer(Sn > 0)) / (1:n)
return(list(Sn = Sn, Tn = Tn))
}
random_walk <- function(distribution, n){
Sn <- cumsum(distribution(n))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200)
tmp$Sn
plot(tmp$Sn)
?runif
tmp <- random_walk(runif(min = -1, max = 1), 200)
tmp <- random_walk(runif, 200, min = -1, max = 1)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(runif, 200, min = -1, max = 1)
tmp$Sn
plot(Sn)
?binomial
tmp <- random_walk(runif, 200, mean = 0, sd = 1)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200, mean = 0, sd = 1)
plot(tmp$Sn)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200, mean = 0, sd = 1)
plot(tmp$Sn)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200, mean = 0, sd = 1)
plot(tmp$Sn)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200, mean = 0, sd = 1)
plot(tmp$Sn)
?plot
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200, mean = 0, sd = 1)
plot(tmp$Sn, type = "l")
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200, mean = 0, sd = 1)
plot(tmp$Sn, type = "l")
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200, mean = 0, sd = 1)
plot(tmp$Sn, type = "l") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200, mean = 0, sd = 1)
plot(tmp$Sn, type = "l") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200, mean = 0, sd = 1)
plot(tmp$Sn, type = "l") + abline(h = 0)
plot(random_walk(rnorm, 200, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
?rsample
?sample
ber <- function(n) 2*rbern(n, 1/2) - 1
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l") + abline(h = 0)
ber <- function(n) 2*rbern(n, 1/2) - 1
plot(random_walk(ber, 500)$Sn, type = "l") + abline(h = 0)
two_points <- function(alfa, beta, n){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
twopoints(1,1, 500)
two_points(1,1, 500)
mean(two_points(1,1, 500))
sum(two_points(1,1, 500))
sum(two_points(1,1, 5000))
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l") + abline(h = 0)
two_points <- function(alfa, beta, n){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(ber, 500, alfa = 1, beta = 1)$Sn, type = "l") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l") + abline(h = 0)
two_points <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(ber, 500, alfa = 1, beta = 1)$Sn, type = "l") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0) + ylab("Trajectory")
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l", "Trajectory") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
for (i in (1:50)){
for (i in (1:50)){
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
result
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
a
}
print(a)
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
```
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n)
result <- c(result, walk$Tn[ncol(walk)])
}
result
for (i in (1:50)){
walk <- random_walk(distribution, n)
result <- c(result, walk$Tn)
}
walk
walk
walk$Sn(length(walk))
walk$Sn[length(walk)]
walk$Sn
walk$Sn[length(walk)]
walk$Sn
walk$Sn[length(walk)]
walk$Sn
walk
length(walk)
walk$Sn[length(walk$Sn)]
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n)
result <- c(result, walk$Sn[length(walk$Sn)])
}
result
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n)
result <- c(result, walk$Tn[length(walk$Tn)])
}
result
ks.test(result, "pbeta", shape1 = 1/2, shape2 = 1/2)
ks.test(result, "pbeta", shape1 = 1/2, shape2 = 1/2)
ks.test(result, "pbeta", shape1 = 1/2, shape2 = 1/2)
ks.test(result, "pbeta", shape1 = 1/2, shape2 = 1/2)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
ks.test(realization_Tn, "pbeta", shape1 = 1/2, shape2 = 1/2)
realization_Tn
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
return(result)
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
ks.test(realization_Tn, "pbeta", shape1 = 1/2, shape2 = 1/2)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
return(result)
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
ks.test(realization_Tn, "pbeta", shape1 = 1/2, shape2 = 1/2)
