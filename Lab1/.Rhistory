Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200, mean = 0, sd = 1)
plot(tmp$Sn, type = "l") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200, mean = 0, sd = 1)
plot(tmp$Sn, type = "l") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
tmp <- random_walk(rnorm, 200, mean = 0, sd = 1)
plot(tmp$Sn, type = "l") + abline(h = 0)
plot(random_walk(rnorm, 200, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
?rsample
?sample
ber <- function(n) 2*rbern(n, 1/2) - 1
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l") + abline(h = 0)
ber <- function(n) 2*rbern(n, 1/2) - 1
plot(random_walk(ber, 500)$Sn, type = "l") + abline(h = 0)
two_points <- function(alfa, beta, n){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
twopoints(1,1, 500)
two_points(1,1, 500)
mean(two_points(1,1, 500))
sum(two_points(1,1, 500))
sum(two_points(1,1, 5000))
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l") + abline(h = 0)
two_points <- function(alfa, beta, n){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(ber, 500, alfa = 1, beta = 1)$Sn, type = "l") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l") + abline(h = 0)
two_points <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(ber, 500, alfa = 1, beta = 1)$Sn, type = "l") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l") + abline(h = 0)
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l") + abline(h = 0) + ylab("Trajectory")
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l", "Trajectory") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
plot(random_walk(rnorm, 500, mean = 0, sd = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(random_walk(runif, 500, min = -1, max = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
plot(random_walk(two_pointed, 500, alfa = 1, beta = 1)$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
for (i in (1:50)){
for (i in (1:50)){
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
result
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
a
}
print(a)
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
```
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[ncol(walk)])
}
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n)
result <- c(result, walk$Tn[ncol(walk)])
}
result
for (i in (1:50)){
walk <- random_walk(distribution, n)
result <- c(result, walk$Tn)
}
walk
walk
walk$Sn(length(walk))
walk$Sn[length(walk)]
walk$Sn
walk$Sn[length(walk)]
walk$Sn
walk$Sn[length(walk)]
walk$Sn
walk
length(walk)
walk$Sn[length(walk$Sn)]
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n)
result <- c(result, walk$Sn[length(walk$Sn)])
}
result
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
result <- vector()
for (i in (1:50)){
walk <- random_walk(distribution, n)
result <- c(result, walk$Tn[length(walk$Tn)])
}
result
ks.test(result, "pbeta", shape1 = 1/2, shape2 = 1/2)
ks.test(result, "pbeta", shape1 = 1/2, shape2 = 1/2)
ks.test(result, "pbeta", shape1 = 1/2, shape2 = 1/2)
ks.test(result, "pbeta", shape1 = 1/2, shape2 = 1/2)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
ks.test(realization_Tn, "pbeta", shape1 = 1/2, shape2 = 1/2)
realization_Tn
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
return(result)
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
ks.test(realization_Tn, "pbeta", shape1 = 1/2, shape2 = 1/2)
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
return(result)
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
ks.test(realization_Tn, "pbeta", shape1 = 1/2, shape2 = 1/2)
n <- 12
set.seed(10)
x <- runif(n)
x
normal_variable <- (sum(x) - n/2) / (sqrt(n/12))
normal_variable
normal <- function(){
n <- 12
x <- runif(n)
normal_variable <- (sum(x) - n/2) / (sqrt(n/12))
return(normal_variable)
}
normal()
m <- 200
normal_vector <- vector()
for (i in 1:m){
normal_vector <- c(normal_vector, normal())
}
{
hist(normal_vector, prob = TRUE)
rug(normal_vector)
curve(dnorm, from = -3, to = 3, add = TRUE)
}
ecdf(normal_vector)
{
plot(ecdf(normal_vector))
curve(pnorm, from = -3, to = 3, add = TRUE)
}
ks.test(normal_vector, pnorm)
bern <- function(alfa, beta){
x <- runif(1)
return(as.integer(x < alfa / (alfa + beta)))
}
experiment <- function(alfa, beta, n){
X <- vector()
for (i in 1:n){
Xn <- bern(alfa + sum(X), beta + length(X) - sum(X))
X <- c(X, Xn)
}
S <- cumsum(X)
return(S)
}
alfa <- 1
beta <- 1
n <- 2000
data_for_plot <- data.frame(x = 1:n)
for(i in 1:20){
results <- experiment(alfa, beta, n)
name <- paste0("experiment", i)
data_for_plot[name] <- results / (1:n)
}
# Tworzymy wykres z wykorzystaniem matplot
matplot(data_for_plot$x, data_for_plot[, -1], type = "l", lty = 1,
xlab = "Indeks", ylab = "Wynik/Indeks", main = "Wyniki eksperymentów")
generate_betas <- function(alfa, beta, n, m){
betas <- vector()
for(i in 1:m){
results <- experiment(alfa, beta, n)
betas <- c(betas, results[n]/n)
}
return(betas)
}
my_betas <- generate_betas(1, 1, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 1, shape2 = 1)
my_betas <- generate_betas(3, 2, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 3, shape2 = 2)
my_betas <- generate_betas(11, 1, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 11, shape2 = 1)
my_betas <- generate_betas(0.5, 0.5, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 0.5, shape2 = 0.5)
my_betas <- generate_betas(5, 31, 200, 200)
ks.test(my_betas, "pbeta", shape1 = 5, shape2 = 31)
rm(list = ls())
random_walk <- function(distribution, n, ...){
Sn <- cumsum(distribution(n, ...))
Sn <- c(0, Sn)
Tn <- cumsum(as.integer(Sn > 0)) / (1:(n+1))
return(list(Sn = Sn, Tn = Tn))
}
two_pointed <- function(n, alfa, beta){
x <- runif(n)
return(as.integer(x < alfa / (alfa + beta))*2 - 1)
}
normal_walk <- random_walk(rnorm, 500, mean = 0, sd = 1)
unif_walk <- random_walk(runif, 500, min = -1, max = 1)
bern_walk <- random_walk(two_pointed, 500, alfa = 1, beta = 1)
plot(normal_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(unif_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
plot(bern_walk$Sn, type = "l", ylab = "Trajectory") + abline(h = 0)
generate_Tn <- function(distribution, n, m, ...){
result <- vector()
for (i in (1:m)){
walk <- random_walk(distribution, n, ...)
result <- c(result, walk$Tn[length(walk$Tn)])
}
return(result)
}
realization_Tn <- generate_Tn(rnorm, 500, 50, mean = 0, sd = 1)
ks.test(realization_Tn, "pbeta", shape1 = 1/2, shape2 = 1/2)
